#pragma kernel CSMainPos
#pragma kernel CSMainVel
#pragma target 4.0

#define thread_group_size_x 2
#define thread_group_size_y 2
#define thread_group_size_z 2


//================================================================================================
// Summary
//================================================================================================
/**
 * This shader implements a mass spring model. There are two main kernels: CSMainPos and CSMainVel,
 * for position and velocity respectively. The position kernel is straightforward: it gets the index
 * of the current vertex in the overall grid and updates its position according to it velocity.
 *
 * The velocity kernel uses all of the neighbouring points in the grid as well as the external forces
 * acting on the grid in order to calculate the current acceleration at a given vertex and updates
 * the velocity of that vertex according to the acceleration.
 */

/** The position, velocity and force structs hold 3D positions, velocity and force vectors for individual points on the grid. 
 */
struct Position
{
    float3 pos;
};

struct Velocity
{
    float3 vel;
};

struct Force
{
    float3 force;
};

/** The Neighbours struct holds the positions of the 12 surrounding neighbours of an individual point on the grid. 
 *  These are: north, north-east, east, south-east, south, south-west, west, north-west, north-bend, east-bend, south-bend, west-bend.
 *  The bend neighbours implement resistance to bending in the grid. They are 2 grid spaces away on the x (west bend and east bend)
 *  and y (north bend and south bend) axes.
 */
struct Neighbours
{
    float2 neighbours[12];
};

/** The properties struct holds the physical properties of the grid
  *
  * The mass of individual mass points in the mass spring model.
  * Increasing this will make the mass points more resistive to
  * the springs in the model, but will also reduce their velocity.  
  *
  * The level of damping in the system. Increasing this value
  *  will cause the system to return to a more 'stable' state quicker,
  *  and will reduce the propagation of forces throughout the grid.  
  *  
  * The stiffness of the spings in the grid. Increasing this will
  *  cause mass points to 'rebound' with higher velocity, and will
  *  also decrease the time taken for the system to return to a
  *  'stable' state.
  *
  * The lenght of the springs in the grid. This defines how far
  *  each mass unit is at a resting state.
  */
struct Properties
{
    float mass;
    float damping;
    float springStiffness;
    float springLength;
};


cbuffer MaxDistanceBuffer
{
    float maxDistance; // 임계값으로 사용될 변수
}

struct DeltaTime
{
    float deltaTime;
};

RWStructuredBuffer<Position> posBuffer;
RWStructuredBuffer<Velocity> velBuffer;
RWStructuredBuffer<Force> externalForcesBuffer;
RWStructuredBuffer<Neighbours> neighboursBuffer;
RWStructuredBuffer<Properties> propertiesBuffer;
RWStructuredBuffer<DeltaTime> deltaTimeBuffer;
RWStructuredBuffer<float3> originalPosBuffer;


/** Get the force exerted on a grid point at index idx by its neighbour at index nIdx.
  */
const float3 getForceForNeighbour(const int idx, const int2 nIdx, const float stiffness, const float springLength, const float dampingFactor)
{
    float3 d = posBuffer[nIdx.x * nIdx.y].pos - posBuffer[idx].pos;
    float dLength = length(d);
    // avoid division by 0.
    float divisor = dLength + ((float) (dLength == 0.0f));
    float3 dN = d / (divisor == 0.0f ? 1.0f : divisor);
    float3 force = stiffness * (d - springLength * dN) + dampingFactor * (velBuffer[nIdx.x].vel - velBuffer[idx.x].vel);
    // nIdx.y is a flag indicating whether that index exists within the grid bounds (1.0f or 0.0f).
    return force * nIdx.y;
}

[numthreads(thread_group_size_x, thread_group_size_y, thread_group_size_z)]
void CSMainVel(uint3 id : SV_DispatchThreadID)
{
    /** Our compute shader runs the same kernels in parallel on mutliple blocks of our
     *  mass spring grid. These blocks are of dimensions gX by gY,
     *  and there are thread_group_size_x blocks along the x dimension of our grid and
     *  thread_group_size_y along the Y dimension.
     *  
     *  These values MUST be identical to the gridUnitSideX and gridUnitSideY values in the 
     *  MassSpringSystem script.
     */

	//number of points per side, per thread.
    const int gX = 20;
    const int gY = 20;
    const int gZ = 4;

    //grid side resolution
    const int sX = gX * thread_group_size_x;
    const int sY = gY * thread_group_size_y;
    const int sZ = gZ * thread_group_size_z;

    const float mass = propertiesBuffer[0].mass;
    const float damping = propertiesBuffer[0].damping;
    const float stiffness = propertiesBuffer[0].springStiffness;
    const float springLength = propertiesBuffer[0].springLength;

    //get the index of the vertex in the overall grid.
    //const int idx    = id.x + id.y * thread_group_size_x * gX;
    const int idx = id.x + id.y * sX + id.z * sX * sY;

    //max index is the number of vertices in our grid.
    const int maxIdx = sX * sY * sZ; // X, Y, Z 축을 고려한 총 정점 수

    int2 northNeighbour = neighboursBuffer[idx].neighbours[0];
    int2 northEastNeighbour = neighboursBuffer[idx].neighbours[1];
    int2 eastNeighbour = neighboursBuffer[idx].neighbours[2];
    int2 southEastNeighbour = neighboursBuffer[idx].neighbours[3];
    int2 southNeighbour = neighboursBuffer[idx].neighbours[4];
    int2 southWestNeighbour = neighboursBuffer[idx].neighbours[5];
    int2 westNeighbour = neighboursBuffer[idx].neighbours[6];
    int2 northWestNeighbour = neighboursBuffer[idx].neighbours[7];

    int2 northBendNeighbour = neighboursBuffer[idx].neighbours[8];
    int2 eastBendNeighbour = neighboursBuffer[idx].neighbours[9];
    int2 southBendNeighbour = neighboursBuffer[idx].neighbours[10];
    int2 westBendNeighbour = neighboursBuffer[idx].neighbours[11];

    /** Our grid is structured to have rigid, non-moving edges.
     */
    const float notEdge = (float) (northBendNeighbour.y && eastBendNeighbour.y && westBendNeighbour.y && southBendNeighbour.y);
    
    const float3 northForce = getForceForNeighbour(idx, northNeighbour, stiffness, springLength, damping);
    const float3 northEastForce = getForceForNeighbour(idx, northEastNeighbour, stiffness, springLength, damping);
    const float3 eastForce = getForceForNeighbour(idx, eastNeighbour, stiffness, springLength, damping);
    const float3 southEastForce = getForceForNeighbour(idx, southEastNeighbour, stiffness, springLength, damping);
    const float3 southForce = getForceForNeighbour(idx, southNeighbour, stiffness, springLength, damping);
    const float3 southWestForce = getForceForNeighbour(idx, southWestNeighbour, stiffness, springLength, damping);
    const float3 westForSpringComputeShaderPropertiesce = getForceForNeighbour(idx, westNeighbour, stiffness, springLength, damping);
    const float3 northWestForce = getForceForNeighbour(idx, northWestNeighbour, stiffness, springLength, damping);

    const float3 northBendForce = getForceForNeighbour(idx, northBendNeighbour, stiffness, springLength, damping);
    const float3 eastBendForce = getForceForNeighbour(idx, eastBendNeighbour, stiffness, springLength, damping);
    const float3 westBendForce = getForceForNeighbour(idx, southBendNeighbour, stiffness, springLength, damping);
    const float3 southBendForce = getForceForNeighbour(idx, westBendNeighbour, stiffness, springLength, damping);

    //const float3 internalForce   = (northForce + eastForce + westForce + southForce + northEastForce + northWestForce + southEastForce + southWestForce + northBendForce + eastBendForce + westBendForce + southBendForce);
    //Add the external forces from the external forces buffer to the internal neighbour forces.
   
   
    /* const float3 force           = externalForcesBuffer[idx].force;
    //m = fa, a = f/m
    const float3 acceleration = force / (mass == 0.0f ? 1.0f : mass);
    float        delta           = deltaTimeBuffer[0].deltaTime;
    //notEdge acts like a boolean flag here, zeroing out any vertices that exist along the edges.
    const float3 vDelta =  acceleration * delta;
    float3 newVel = velBuffer[idx].vel + vDelta;
    velBuffer[idx].vel = newVel;
    */
    const float3 force = externalForcesBuffer[idx].force;
    float3 newVel;

    // 힘이 적용되고 있는지 확인
    if (length(force) > 0)
    {
        // 힘이 있을 때: 가속도를 계산하고 속도 업데이트
        const float3 acceleration = force / (mass == 0.0f ? 1.0f : mass);
        float delta = deltaTimeBuffer[0].deltaTime;
        newVel = velBuffer[idx].vel + acceleration * delta;
    }
    else
    {
        // 힘이 없을 때: 속도 유지 또는 0으로 설정
        newVel = float3(0, 0, 0); // 또는 velBuffer[idx].vel 유지
    }

    velBuffer[idx].vel = newVel;


    
}

[numthreads(thread_group_size_x, thread_group_size_y, thread_group_size_z)]
void CSMainPos(uint3 id : SV_DispatchThreadID)
{
	//number of points per side, per thread.
    const int gX = 20;
    const int gY = 20;
    const int gZ = 4;

    //index y, x, in order to convert to unity space
    //const int idx = id.x + id.y * thread_group_size_x * gX;
    const int idx = id.x + id.y * gX * thread_group_size_x + id.z * gX * thread_group_size_x * gY;

    //calculate new positions given new velocities
    const float delta = deltaTimeBuffer[0].deltaTime;
    externalForcesBuffer[idx].force = float3(0.0f, 0.0f, 0.0f);


    // 현재 위치와 초기 위치 비교
    float3 originalPos = originalPosBuffer[idx]; // 초기 위치
    float3 currentPos = posBuffer[idx].pos; // 현재 위치
    if ((id.x == 39 && id.y == 39 && id.z ==15 ))
        posBuffer[idx].pos = float3(0, 0, 0);
    // 거리 계산
    float distance = length(currentPos - originalPos);

    // 임계값 설정

    // 임계값을 초과하는 경우 메쉬 제거
    if (distance > maxDistance)
    {
        // 메쉬 비활성화 또는 제거
        posBuffer[idx].pos = float3(0, 0, 0); // 예: 위치를 (0, 0, 0)으로 설정하여 비활성화
    }
    else
    {
        // 위치 업데이트
        posBuffer[idx].pos = posBuffer[idx].pos + (velBuffer[idx].vel * delta);
    }

}



